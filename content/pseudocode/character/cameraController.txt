extends Camera3D
class_name CameraController

class CameraModule:
	extends Resource
	@export var name: String
	@export var module: Node
	@export var enabled: bool = true
	@export var priority: int = 0

	func apply(character: Node, camera: Camera3D, transform: Transform3D, delta: float) -> Transform3D:
		if not enabled or not module:
			return transform
		if module.has_method("apply"):
			return module.call("apply", character, camera, transform, delta)
		return transform

@export_category("Camera Modules")
@export var camera_modules: Array[CameraModule] = []

@export var camera: Camera3D
@export var transitioner: Node
@export var shaderer: Node
@export var use_global_transform: bool = true

@export var camera_modules_dir: String = "res://Character/Modules/Camera"

var last_transform: Transform3D

func _ready():
	last_transform = camera.global_transform if use_global_transform else camera.transform

	for m in camera_modules:
		if m.module and m.module is Node:
			add_child(m.module)

	if transitioner and transitioner is Node:
		add_child(transitioner)

	if shaderer and shaderer is Node:
		add_child(shaderer)

func _process(delta: float):
	if not camera:
		return

	var character = get_parent()
	var target_transform := _get_target_transform(character, delta)
	var blended := _blend_transform(target_transform, delta)
	_apply_transform(blended)
	_update_shader(delta, character)
	last_transform = blended

func _get_target_transform(character: Node, delta: float) -> Transform3D:
	var transform := last_transform
	var sorted := camera_modules.filter(func(m): return m.enabled and m.module != null)
	sorted.sort_custom(func(a, b): return a.priority > b.priority)
	for m in sorted:
		transform = m.apply(character, camera, transform, delta)
	return transform

func _blend_transform(target: Transform3D, delta: float) -> Transform3D:
	if transitioner and transitioner.has_method("apply"):
		return transitioner.apply(last_transform, target, camera, delta)
	return target

func _apply_transform(transform: Transform3D):
	if use_global_transform:
		camera.global_transform = transform
	else:
		camera.transform = transform

func _update_shader(delta: float, character: Node):
	if shaderer and shaderer.has_method("update_shader"):
		shaderer.update_shader(delta, character, camera)

func load_camera_modules():
	var paths: Array = []
	ut.appendDir(camera_modules_dir, paths)
	for path in paths:
		var instance := load(path).new()
		var mod := CameraModule.new()
		mod.name = path.get_file().get_basename()
		mod.module = instance
		camera_modules.append(mod)
		add_child(instance)
